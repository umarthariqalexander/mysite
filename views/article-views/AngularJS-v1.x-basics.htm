<div class="article-wrapper">
    <div class="article-heading">AngularJS V1.X Basics</div>
    <div class="sub-heading">Introduction</div>
    <div class="content">
        <p>AngularJS is one of the famous Javascript framework. It is open source. Its maintained by Google. It helps people
            to create a Single Page Applications.</p>
    </div>
    <div class="sub-heading">
        MVC
    </div>
    <img ng-src={{images.mvc}} style="width: 65%;" class="m-b-10" />
    <div class="content">
        <div class="m-b-10">
            AngularJS follows the MVC pattern architecture. MVC pattern is one of the software development methodologies used in web
            application developments.
        </div>
        <div class="m-b-5">
            <div class="m-b-5">Here in AngularJS MVC structure, </div>
            <div>
                <span class="highlighter-heading">Model</span> - Basically it holds Data.</div>
            <div>
                <span class="highlighter-heading">View</span> - Where the user can see the presentation of the model or operations. </div>
            <div>
                <span class="highlighter-heading">Controller</span> - Which controls the interaction between the Model and View Layers. It is the place where
                we contains most of our application logics.</div>
        </div>
    </div>
    <div class="content">
        <div class="m-b-5">So in this article, we are going to cover basic pillars of AngularJS,</div>
        <ul>
            <li>Directives</li>
            <li>Expressions</li>
            <li>Controllers</li>
            <li>Filters</li>
            <li>Modules</li>
            <li>Services</li>
        </ul>
    </div>
    <div class="sub-heading">Directives</div>
    <div class="content m-b-5">
        Directives are most powerful components of AngularJS, Which helps to improve your HTML tags functionalities by adding markers
        on it.
    </div>
    <div class="content m-b-5">
        Two types of Directives,
    </div>
    <ul class="content">
        <li>Default Directives - (i.e. AngularJS default directives like ng-model, ng-bind etc.)</li>
        <li>Custom Directives</li>
    </ul>
    <div class="sub-header-heading">Default Directives</div>
    <div class="content m-b-5">
        Angular’s default directives has “ng-“ as a prefix. This refers to namespace of angular it helps to differentiate between
        your own directives and default ones.
    </div>
    <div class="m-b-10">
        <div class="">Angular has plenty of useful default directives but we going to see only most useful directives of angular.</div>
        <div class="m-b-10">For more directives please refer this link:
            <a style="text-decoration: underline; text-decoration-color: blue;" href="//docs.angularjs.org/api/ng/directive"
                target="_blank">Angular Directives</a>
        </div>
        <div>Most useful default directives, </div>
    </div>
    <div class="code-snippet">
        <div class="special-title-header">ng-app</div>
        <div class="content">If you include ng-app directive in any of your html tag then that denotes, this tag contains an angular application.
            </div>
        <div class="content m-b-5">Inside that tag what ever you write that will be considered and evaluated as a angular application code.</div>
        <textarea disabled="true" class="code-wrapper" rows="8">
<html>
    <head>
        <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.7.2/angular.min.js"></script>
    </head>
    <body>
        <div ng-app>&#123; &#123; 3 + 2 &#125; &#125;</div>
    </body>
</html>
        </textarea>
        <div class="output-wrapper">
            <div class="output">Output</div>
            <div>5</div>
        </div>
    </div>

    <div class="code-snippet">
        <div class="special-title-header">AngularJS Expression</div>
        <div class="content m-b-5">AngularJS expressions should be written inside double open and close curly braces. </div>
        <textarea disabled="true" class="code-wrapper" rows="3">
    <div ng-app>
        <input ng-model="colorValue" style="background-color:{ { colorValue } }"/>
    </div>
        </textarea>
    </div>
    <div class="code-snippet m-b-5">
        <div class="special-title-header">ng-init</div>
        <div class="m-b-5 content">If you want initialize variables in view templates, then we can utilize the ng-init directive for that.</div>
        <div class="code-snippet">
        <textarea disabled="true" class="code-wrapper" rows="12" style="resize: none">
<html> 
    <head> 
        <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.7.2/angular.min.js"></script> 
    </head> 
    <body> 
        <div ng-app ng-init="i=100; arr=[1,2,3,4,5]; obj={a:123};">
                &#123; &#123; i &#125; &#125; 
                &#123; &#123; arr[0] &#125; &#125;
                &#123; &#123; obj.a &#125; &#125;
        </div> 
    </body>
</html>
        </textarea>
        <div class="output-wrapper">
            <div class="output">Output</div>
            <div>100 1 123</div>
        </div>
    </div>
    <div class="code-snippet">
        <div class="m-b-5 special-title-header">Module</div>
        <div class="content m-b-5">An AngularJS module defines an application.</div>
        <textarea disabled="true" class="code-wrapper" rows="1">
var app = angular.module( "myApp", [ ] );
        </textarea>
        <div class="content m-b-5 m-b-10">This [ ] parameter in the module definition can be used to define dependent modules.</div>
        <div class="content">AngularJS Module is a container for the application controllers.</div>
        <textarea disabled="true" class="code-wrapper" rows="4">
app.controller( "myCtrl", function( $scope ) { 
    $scope.firstName = "John"; 
    $scope.lastName = "Doe"; 
});
        </textarea>
    </div>

    <div class="code-snippet">
        <div class="special-title-header">ng-controller</div>
        <div class="content">It is used to define controllers in view (HTML) part. </div>
        <div class="content m-b-5">Hence if you declare any tag with 
                the particular controller then inside that tag is the scope for that controller. </div>
        <textarea disabled="true" class="code-wrapper" rows="16">
<html> 
    <head> 
        <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.7.2/angular.min.js"></script> 
        <script> 
            var app = angular.module('angularApp', [ ]); 
            app.controller('angularCtrl', function($scope){ 
                    $scope.ctrlVariable = "angularGeek"; 
                });
        </script> 
    </head> 
    <body> 
        <div ng-app="angularApp" ng-controller="angularCtrl"> 
                &#123; &#123; ctrlVariable &#125; &#125;
        </div> 
    </body>
</html>
        </textarea>
        <div class="output-wrapper">
            <div class="output">Output</div>
            <div>angularGeek</div>
        </div>
    </div>


    <div class="code-snippet">
        <div class="special-title-header">ng-bind</div>
        <div class="content">It is used to bind your controller variable values with your view tags.</div>
        <div class="content m-b-5">It only can bind the values from controller. Hence it is only doing one way data binding.</div>
        <textarea disabled="true" class="code-wrapper" rows="16">
<html> 
    <head> 
        <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.7.2/angular.min.js"></script> 
        <script> 
            var app = angular.module('angularApp', [ ]); 
            app.controller('angularCtrl', function($scope){ 
                    $scope.modelVariable = "I am a angular Geek"; 
                });
            </script> 
        </head> 
        <body> 
        <div ng-app="angularApp" ng-controller="angularCtrl"> 
            <div ng-bind="modelVariable"></div>
        </div> 
        </body>
</html>
        </textarea>
        <div class="output-wrapper">
            <div class="output">Output</div>
            <div>I am a angular Geek</div>
        </div>
    </div>


    <div class="code-snippet">
        <div class="special-title-header">ng-model</div>
        <div class="content">It will bind the controller variable values with view part as well as bind the view part values with controller variables, </div>
        <div class="content m-b-5">Hence it is doing Two way data binding. And it only works with input tags. i.e. input, textarea, select etc.</div>
        <textarea disabled="true" class="code-wrapper" rows="17">
<html> 
    <head> 
        <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.7.2/angular.min.js"></script> 
        <script> 
            var app = angular.module('angularApp', [ ]); 
            app.controller('angularCtrl', function($scope){ 
                    $scope.modelVariable = "I am a angular Geek"; 
            });
        </script> 
    </head> 
    <body> 
    <div ng-app="angularApp" ng-controller="angularCtrl"> 
        <input ng-model="modelVariable"/>
        <div ng-bind="modelVariable"></div>
    </div> 
    </body>
</html>
         </textarea>
    </div>

    <div class="code-snippet">
        <div class="special-title-header">ng-repeat</div>
        <div class="content m-b-5">It is used to iterate the array values and clone the html elements to display those values.</div>
        <textarea disabled="true" class="code-wrapper" rows="18">
<html> 
    <head> 
        <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.7.2/angular.min.js"></script> 
        <script> 
            var app = angular.module('angularApp', [ ]); 
            app.controller('angularCtrl', function($scope){ 
                    $scope.ctrlVariable = ['apple', 'orange', 'grapes'];
                });
            </script> 
    </head> 
    <body> 
        <div ng-app="angularApp" ng-controller="angularCtrl"> 
            <ul> 
                <li ng-repeat="x in ctrlVariable" ng-bind="x"></li>
            </ul>
        </div> 
    </body>
</html>
        </textarea>
        <div class="output-wrapper">
            <div class="output">Output</div>
            <ul>
                <li>apple</li>
                <li>orange</li>
                <li>grapes</li>
            </ul>
        </div>
    </div>

    <div class="code-snippet">
        <div class="special-title-header">ng-class</div>
        <div class="m-b-5 content">It is used to apply the classes for html tags based on conditions.</div>
        <textarea disabled="true" class="code-wrapper" rows="21">
<html> 
    <head> 
        <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.7.2/angular.min.js"></script> 
        <script> 
            var app = angular.module('angularApp', [ ]); 
            app.controller('angularCtrl', function($scope){ 
                    $scope.test = 1;
                });
            </script> 
        <style> 
        .sampleClass{ 
            background-color: yellow; 
        }
        </style>
    </head> 
        <body> 
        <div ng-app="angularApp" ng-controller="angularCtrl"> 
            <p ng-class="{'sampleClass': test===1}">This is sample paragraph</p>            
        </div> 
    </body>
</html>
        </textarea>
        <div class="output-wrapper">
            <div class="output">Output</div>
            <p style="background-color: yellow;">This is sample paragraph</p>
        </div>
    </div>

    <div class="code-snippet">
        <div class="special-title-header">Custom Directives</div>
        <div class="content">Some times we need to repeat the same code again and again for achieve the same functionality in multiple places. </div>
        <div class="m-b-5">Instead we can create a custom directives and put the repeating code to achieve the reusability.</div>
        <textarea disabled="true" class="code-wrapper" rows="18">
<html> 
    <head> 
        <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.7.2/angular.min.js"></script> 
        <script> 
            var app = angular.module('angularApp', []); 
            app.directive('myDirective', function(){
                return{
                    template:'<h1>I am own directive</h1>'
                }
                });
            </script>
    </head> 
    <body> 
        <div ng-app="angularApp"> 
            <my-directive></my-directive>
        </div> 
    </body>
</html>
        </textarea>
        <div class="output-wrapper">
            <div class="output">Output</div>
            <h1>I am own directive</h1>
        </div>
    </div>
    <div class="m-t-10">
        Different ways to invoke the custom directives,
    </div>
    <ul>
        <li>As a Element Name
                <textarea disabled="true" class="code-wrapper" rows="1"><my-directive></my-directive> </textarea>
        </li>
        <li>    <div>As a Tag Attribute </div>
                <textarea disabled="true" class="code-wrapper" rows="1"><div my-directive></div></textarea>
        </li>
        <li>
            <div>As a Class Name</div>
            <textarea disabled="true" class="code-wrapper" rows="1"><div class="my-directive"></div></textarea>
        </li>
        <li><div>As a Comment</div> <textarea disabled="true" class="code-wrapper" rows="1"><!-- directive: my-directive --></textarea> </li>
    </ul>


    <div class="sub-heading">Services</div>
    <div class="special-title-header">When you need service,</div>
    <div>- When you have common functionality that needed by multiple controllers / entire application. </div>
    <div class="m-b-5">- When you don’t want to repeat your common function body in multiple places where ever it requires.</div>

    <div class="special-title-header">AngularJS services are,</div>
    <div><span class="highlighter-heading">Singletons:</span> Create a single instance of your service across the application.</div>
    <div class="m-b-20"><span class="highlighter-heading">Lazily instantiated:</span> Create a instance, whenever any component requires it.</div>
    <div class="content">Angular has 30 built in services, some of them are $filter, $http, $log, $window, $rootScope.</div>
    <div class="code-snippet">
    <div class="special-title-header">$filter - Service:</div>
    <div class="content m-b-5">AngularJS provides filter service to transform data. We can use $filter service in View Templates or in Controller.</div>
    <div class="special-title-header">$filter - In View Templates,</div>
    <div class="content m-b-5">In Templates we use pipe '|' symbol to apply any filters</div>
    <textarea disabled="true" class="code-wrapper" rows="19">
<html> 
    <head> 
        <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.7.2/angular.min.js"></script> 
        <script> 
            var app = angular.module('angularApp', []); 
            app.controller('angularCtrl', function($scope) { 
                $scope.names = ['apple', 'orange', 'grapes', 'banana']; 
            });
        </script>
    </head> 
    <body> 
        <div ng-app="angularApp" ng-controller="angularCtrl"> 
          <input ng-model="searchKey"/>
          <ul> 
           <li ng-repeat="name in names | filter:searchKey | orderBy" ng-bind="name | uppercase"></li>
          </ul>
         </div> 
    </body>
</html>
    </textarea>
        </div>
<div class="code-snippet">
    <div class="special-title-header m-b-5">
            $filter - In Controller,
        </div>
        <textarea disabled="true" class="code-wrapper" rows="19">
<html> 
    <head> 
        <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.7.2/angular.min.js"></script> 
        <script> 
            var app = angular.module('angularApp', []); 
            app.controller('angularCtrl', function($scope, $filter) { 
                $scope.name = 'angulargeek’; 
                $scope.updatedName = $filter('uppercase')($scope.name); 
            });
        </script>
        </head> 
        <body> 
        <div ng-app="angularApp"> 
            { { name } }
            { { updatedName } }
        </div> 
    </body>
</html>
    </textarea>
</div>

<div class="code-snippet">
    <div class="special-title-header m-b-5">
            $http - Service:
    </div>
    <textarea disabled="true" class="code-wrapper" rows="24">
<html> 
    <head> 
        <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.7.2/angular.min.js"></script> 
        <script> 
            var app = angular.module('angularApp', []); 
            app.controller('angularCtrl', function($scope, $http) {    
            $http.get("https://reqres.in/api/users?page=1&per_page=10")                                                              
                .then(function(response){ 
                        $scope.users = response.data.data; 
                }); 
            });
        </script>
    </head> 
    <body> 
        <div ng-app="angularApp" ng-controller="angularCtrl"> 
            <ul> 
                <li ng-repeat="user in users"> 
                    <div>{ { user.first_name } }</div> 
                        <img ng-src="{ { user.avatar } }"/> 
                </li> 
            </ul>
        </div> 
    </body>
</html>
    </textarea>
</div>
<div class="sub-heading">Custom Services,</div>
<div class="special-title-header">Ways to create a custom service,</div>
<ul>
    <li>Using Service method - It will return the service instance.</li>
    <li>Using Factory method - It will return the object with the properties.</li>
</ul>

<textarea disabled="true" class="code-wrapper" rows="33">
<html> 
    <head> 
        <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.7.2/angular.min.js"></script> 
        <script>               
            var app = angular.module('angularApp', ['calculator']); 
            app.controller('angularCtrl', function($scope, calculatorService, calculatorFactory) {                      
            $scope.resultSquare = calculatorService.square(10); 
            $scope.resultCube = calculatorFactory.cube(10); 
            }); 

            var calc = angular.module('calculator', []); 

            calc.service('calculatorService', function(){   // Using Service Method
                this.square = function(a){ 
                    return a*a; 
                } 
            }); 

            calc.factory('calculatorFactory', function(){   // Using Factory Method
                return{ 
                    cube: function(a){ 
                    return a*a*a; 
                    } 
                } 
            }); 
        </script> 
    </head> 
    <body> 
        <div ng-app="angularApp" ng-controller="angularCtrl"> 
                { { resultSquare } } { { resultCube } } 
        </div> 
    </body>
</html>
</textarea>
    <div class="m-b-40 m-t-40"> Thanks and Welcome back !!!</div>
</div>